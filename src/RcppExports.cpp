// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/LSTDConnect.h"
#include <Rcpp.h>

using namespace Rcpp;

// cache_samc
Rcpp::XPtr<samc::cache> cache_samc(const Rcpp::NumericMatrix& kernel, const Rcpp::NumericMatrix& resistance, const Rcpp::NumericMatrix& fidelity, const Rcpp::NumericMatrix& absorbtion, const bool symmetric);
RcppExport SEXP _LSTDConnect_cache_samc(SEXP kernelSEXP, SEXP resistanceSEXP, SEXP fidelitySEXP, SEXP absorbtionSEXP, SEXP symmetricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type resistance(resistanceSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type fidelity(fidelitySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type absorbtion(absorbtionSEXP);
    Rcpp::traits::input_parameter< const bool >::type symmetric(symmetricSEXP);
    rcpp_result_gen = Rcpp::wrap(cache_samc(kernel, resistance, fidelity, absorbtion, symmetric));
    return rcpp_result_gen;
END_RCPP
}
// samc_cache_sizes
std::vector<size_t> samc_cache_sizes(const Rcpp::XPtr<samc::cache>& ca);
RcppExport SEXP _LSTDConnect_samc_cache_sizes(SEXP caSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::XPtr<samc::cache>& >::type ca(caSEXP);
    rcpp_result_gen = Rcpp::wrap(samc_cache_sizes(ca));
    return rcpp_result_gen;
END_RCPP
}
// samc_step
Rcpp::List samc_step(std::vector<long> steps, const Rcpp::XPtr<samc::cache>& ca, const Rcpp::NumericMatrix& pop_in, Rcpp::NumericMatrix dead_in);
RcppExport SEXP _LSTDConnect_samc_step(SEXP stepsSEXP, SEXP caSEXP, SEXP pop_inSEXP, SEXP dead_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<long> >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::XPtr<samc::cache>& >::type ca(caSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type pop_in(pop_inSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dead_in(dead_inSEXP);
    rcpp_result_gen = Rcpp::wrap(samc_step(steps, ca, pop_in, dead_in));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LSTDConnect_cache_samc", (DL_FUNC) &_LSTDConnect_cache_samc, 5},
    {"_LSTDConnect_samc_cache_sizes", (DL_FUNC) &_LSTDConnect_samc_cache_sizes, 1},
    {"_LSTDConnect_samc_step", (DL_FUNC) &_LSTDConnect_samc_step, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_LSTDConnect(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
